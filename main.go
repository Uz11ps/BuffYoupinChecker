package main

import (
	"log"
	"strconv"
	"time"

	"buff-youpin-checker/analyzer"
	"buff-youpin-checker/bot"
	"buff-youpin-checker/config"
	"buff-youpin-checker/database"
	"buff-youpin-checker/market"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := config.Load()
	
	// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	log.Printf("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: host=%s port=%s user=%s password=%s dbname=%s", 
		cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPassword, cfg.DBName)
	
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := database.Connect(cfg)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err)
	}
	defer db.Close()

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Market API
	marketClient := market.NewClient(cfg.MarketAPIKey)

	// –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤
	trendAnalyzer := analyzer.NewTrendAnalyzer(db)

	// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
	telegramBot, err := bot.NewBot(cfg.TelegramToken, trendAnalyzer, db)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go startDataCollection(marketClient, db)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go startPeriodicAnalysis(trendAnalyzer)

	log.Println("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
	telegramBot.Start()
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å market.csgo.com
func startDataCollection(client *market.Client, db *database.DB) {
	ticker := time.NewTicker(10 * time.Minute) // –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
	defer ticker.Stop()

	for {
		log.Println("üìä –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —Å market.csgo.com...")
		
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
		priceResponse, err := client.GetPrices()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: %v", err)
			<-ticker.C
			continue
		}

		if !priceResponse.Success {
			log.Println("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –≤ –æ—Ç–≤–µ—Ç–µ")
			<-ticker.C
			continue
		}

		log.Printf("–ü–æ–ª—É—á–µ–Ω–æ %d –ø—Ä–µ–¥–º–µ—Ç–æ–≤", len(priceResponse.Items))

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		processedCount := 0
		for _, item := range priceResponse.Items {
			price := parseFloat(item.Price)
			if price <= 0 {
				continue
			}

			// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
			dbItem := &database.Item{
				HashName:   item.MarketHashName,
				MarketName: item.MarketHashName,
				ClassID:    "unknown",
				InstanceID: "0",
			}

			err = db.CreateItem(dbItem)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ %s: %v", item.MarketHashName, err)
				continue
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é
			err = db.AddPriceHistory(dbItem.ID, price, "RUB", "market.csgo.com")
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è %s: %v", item.MarketHashName, err)
				continue
			}

			processedCount++
		}

		log.Printf("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –ø—Ä–µ–¥–º–µ—Ç–æ–≤", processedCount)
		<-ticker.C
	}
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
func startPeriodicAnalysis(analyzer *analyzer.TrendAnalyzer) {
	ticker := time.NewTicker(30 * time.Minute) // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
	defer ticker.Stop()

	// –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
	time.Sleep(5 * time.Minute)

	for {
		log.Println("üîç –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤...")
		
		err := analyzer.AnalyzeAllItems()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: %v", err)
		} else {
			log.Println("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
		}

		<-ticker.C
	}
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤ float64
func parseFloat(s string) float64 {
	f, err := strconv.ParseFloat(s, 64)
	if err != nil {
		return 0
	}
	return f
}