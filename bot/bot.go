package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"buff-youpin-checker/analyzer"
	"buff-youpin-checker/database"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api      *tgbotapi.BotAPI
	analyzer *analyzer.TrendAnalyzer
	db       *database.DB
}

func NewBot(token string, analyzer *analyzer.TrendAnalyzer, db *database.DB) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	api.Debug = false
	log.Printf("–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", api.Self.UserName)

	return &Bot{
		api:      api,
		analyzer: analyzer,
		db:       db,
	}, nil
}

func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallbackQuery(update.CallbackQuery)
		}
	}
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	switch message.Command() {
	case "start":
		b.sendWelcomeMessage(message.Chat.ID)
	case "top":
		b.sendTopItems(message.Chat.ID)
	case "budget":
		b.sendBudgetCalculator(message.Chat.ID)
	case "analyze":
		b.runAnalysis(message.Chat.ID)
	default:
		if message.IsCommand() {
			msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–º–æ—â–∏.")
			b.api.Send(msg)
		} else {
			// –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –±—é–¥–∂–µ—Ç
			if budget, err := strconv.ParseFloat(message.Text, 64); err == nil && budget > 0 {
				if budget < 1000 {
					msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: 1000‚ÇΩ")
					b.api.Send(msg)
				} else if budget > 10000000 {
					msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: 10,000,000‚ÇΩ")
					b.api.Send(msg)
				} else {
					b.sendBudgetResults(message.Chat.ID, budget)
				}
			}
		}
	}
}

func (b *Bot) sendWelcomeMessage(chatID int64) {
	text := `üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CS2 Skin Analyzer!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–Ω—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.

üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/top - –¢–æ–ø –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
/budget - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
/analyze - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞

üöÄ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã —Å–∫–∏–Ω–æ–≤ –∏ –≤—ã–¥–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 10, –≥–¥–µ 10 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ üü¢ BUY - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø–æ–∫—É–ø–∫–µ
‚Ä¢ üü° HOLD - –¥–µ—Ä–∂–∞—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å  
‚Ä¢ üî¥ SELL - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞—Ç—å

üîç *–ù–∞–≤–∏–≥–∞—Ü–∏—è:*
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚¨ÖÔ∏è‚û°Ô∏è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

func (b *Bot) sendTopItems(chatID int64) {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	text := "üìÇ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:*\n\n"
	text += "üî™ –ù–æ–∂–∏ - —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
	text += "üî´ –û—Ä—É–∂–∏–µ - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∫–∏–Ω—ã —Å —Ö–æ—Ä–æ—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º\n"
	text += "üì¶ –ö–µ–π—Å—ã - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å–æ —Å–∫–∏–Ω–∞–º–∏ (—Ç–æ–ª—å–∫–æ Case)\n"
	text += "üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ - —Ä–µ–¥–∫–∏–µ –∏ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
	text += "üóùÔ∏è –ö–ª—é—á–∏ - –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤\n"
	text += "üì§ –ü–∞–∫–µ—Ç—ã - –∫–∞–ø—Å—É–ª—ã –∏ —Å—É–≤–µ–Ω–∏—Ä—ã\n"
	text += "üè∑Ô∏è –°—Ç–∏–∫–µ—Ä—ã - –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å\n"
	text += "üéØ –ë—Ä–µ–ª–∫–∏ - –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
	text += "‚≠ê –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ–±—â–∏–π —Ç–æ–ø"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üî™ –ù–æ–∂–∏", "cat_knives"),
			tgbotapi.NewInlineKeyboardButtonData("üî´ –û—Ä—É–∂–∏–µ", "cat_weapons"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì¶ –ö–µ–π—Å—ã", "cat_containers"),
			tgbotapi.NewInlineKeyboardButtonData("üß§ –ü–µ—Ä—á–∞—Ç–∫–∏", "cat_gloves"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóùÔ∏è –ö–ª—é—á–∏", "cat_keys"),
			tgbotapi.NewInlineKeyboardButtonData("üì§ –ü–∞–∫–µ—Ç—ã", "cat_packages"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè∑Ô∏è –°—Ç–∏–∫–µ—Ä—ã", "cat_stickers"),
			tgbotapi.NewInlineKeyboardButtonData("üéØ –ë—Ä–µ–ª–∫–∏", "cat_charms"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "cat_all"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) sendTopItemsPage(chatID int64, page int) {
	b.sendTopItemsByCategory(chatID, "all", page)
}

func (b *Bot) sendTopItemsByCategory(chatID int64, category string, page int) {
	itemsPerPage := 5
	offset := (page - 1) * itemsPerPage
	
	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var allTrends []analyzer.ItemTrend
	var err error
	
	if category == "all" {
		allTrends, err = b.analyzer.GetTopItems(50)
	} else {
		allTrends, err = b.analyzer.GetTopItemsByCategory(category, 50)
	}
	
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		b.api.Send(msg)
		return
	}

	if len(allTrends) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /analyze –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
		b.api.Send(msg)
		return
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
	totalPages := (len(allTrends) + itemsPerPage - 1) / itemsPerPage
	if page > totalPages {
		page = totalPages
	}
	if page < 1 {
		page = 1
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	start := offset
	end := offset + itemsPerPage
	if end > len(allTrends) {
		end = len(allTrends)
	}
	
	trends := allTrends[start:end]

	categoryName := b.getCategoryName(category)
	text := fmt.Sprintf("üèÜ *%s* (—Å—Ç—Ä. %d/%d)\n\n", categoryName, page, totalPages)
	
	for i, trend := range trends {
		emoji := b.getRecommendationEmoji(trend.Recommendation)
		catEmoji := b.getCategoryEmoji(trend.Category)
		globalIndex := start + i + 1
		
		text += fmt.Sprintf("%d. %s %s %s\n", globalIndex, emoji, catEmoji, trend.MarketName)
		text += fmt.Sprintf("   üìä –†–µ–π—Ç–∏–Ω–≥: %d/10 | üí∞ %.2f ‚ÇΩ | üìà %.1f%%\n", 
			trend.TrendScore, trend.CurrentPrice, trend.GrowthRate)
		text += fmt.Sprintf("   üí° %s\n\n", b.getInvestmentAdvice(trend))
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton
	
	for _, trend := range trends {
		buttonText := fmt.Sprintf("üìä %s", b.truncateString(trend.MarketName, 30))
		callbackData := fmt.Sprintf("item_%d", trend.ItemID)
		button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	var navButtons []tgbotapi.InlineKeyboardButton
	
	if page > 1 {
		prevCallback := fmt.Sprintf("page_%d_%s", page-1, category)
		prevButton := tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", prevCallback)
		navButtons = append(navButtons, prevButton)
	}
	
	if page < totalPages {
		nextCallback := fmt.Sprintf("page_%d_%s", page+1, category)
		nextButton := tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", nextCallback)
		navButtons = append(navButtons, nextButton)
	}
	
	if len(navButtons) > 0 {
		keyboard = append(keyboard, navButtons)
	}

	// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	backButton := tgbotapi.NewInlineKeyboardButtonData("üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "back_to_top")
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{backButton})

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	b.api.Send(msg)
}

func (b *Bot) runAnalysis(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üîÑ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
	b.api.Send(msg)

	go func() {
		err := b.analyzer.AnalyzeAllItems()
		if err != nil {
			errorMsg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: "+err.Error())
			b.api.Send(errorMsg)
			return
		}

		successMsg := tgbotapi.NewMessage(chatID, "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /top –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
		b.api.Send(successMsg)
	}()
}

func (b *Bot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
	b.api.Request(tgbotapi.NewCallback(callback.ID, ""))

	if callback.Data == "back_to_top" {
		b.sendTopItems(callback.Message.Chat.ID)
		return
	}

	if len(callback.Data) > 4 && callback.Data[:4] == "cat_" {
		category := callback.Data[4:]
		b.sendTopItemsByCategory(callback.Message.Chat.ID, category, 1)
		return
	}

	if len(callback.Data) > 5 && callback.Data[:5] == "item_" {
		itemIDStr := callback.Data[5:]
		itemID, err := strconv.Atoi(itemIDStr)
		if err != nil {
			return
		}

		b.sendItemDetails(callback.Message.Chat.ID, itemID)
		return
	}

	if len(callback.Data) > 5 && callback.Data[:5] == "page_" {
		parts := strings.Split(callback.Data[5:], "_")
		if len(parts) >= 1 {
			page, err := strconv.Atoi(parts[0])
			if err != nil {
				return
			}
			
			if len(parts) >= 2 {
				category := parts[1]
				b.sendTopItemsByCategory(callback.Message.Chat.ID, category, page)
			} else {
				b.sendTopItemsPage(callback.Message.Chat.ID, page)
			}
		}
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –±—é–¥–∂–µ—Ç–∞
	if len(callback.Data) > 7 && callback.Data[:7] == "budget_" {
		action := callback.Data[7:]
		
		switch action {
		case "5000":
			b.sendBudgetResults(callback.Message.Chat.ID, 5000)
		case "10000":
			b.sendBudgetResults(callback.Message.Chat.ID, 10000)
		case "25000":
			b.sendBudgetResults(callback.Message.Chat.ID, 25000)
		case "50000":
			b.sendBudgetResults(callback.Message.Chat.ID, 50000)
		case "100000":
			b.sendBudgetResults(callback.Message.Chat.ID, 100000)
		case "custom":
			msg := tgbotapi.NewMessage(callback.Message.Chat.ID, 
				"üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç —á–∏—Å–ª–æ–º –≤ —Ä—É–±–ª—è—Ö:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15000")
			b.api.Send(msg)
		case "new":
			b.sendBudgetCalculator(callback.Message.Chat.ID)
		}
		return
	}
}

func (b *Bot) sendItemDetails(chatID int64, itemID int) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
	query := `SELECT i.hash_name, i.market_name, i.category, i.image_url, 
			  ia.growth_rate, ia.volatility, ia.trend_score, ia.recommendation,
			  (SELECT price FROM price_history WHERE item_id = $1 ORDER BY recorded_at DESC LIMIT 1) as current_price,
			  (SELECT COUNT(*) FROM price_history WHERE item_id = $1) as data_points
			  FROM items i
			  JOIN item_analysis ia ON i.id = ia.item_id
			  WHERE i.id = $1`

	var hashName, marketName, category, imageURL, recommendation string
	var growthRate, volatility, currentPrice float64
	var trendScore, dataPoints int

	err := b.db.QueryRow(query, itemID).Scan(&hashName, &marketName, &category, &imageURL,
		&growthRate, &volatility, &trendScore, &recommendation, &currentPrice, &dataPoints)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ.")
		b.api.Send(msg)
		return
	}

	emoji := b.getRecommendationEmoji(recommendation)
	catEmoji := b.getCategoryEmoji(category)
	
	text := fmt.Sprintf("üìä *–ü–æ–¥—Ä–æ–±–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑*\n\n")
	text += fmt.Sprintf("%s *%s*\n", catEmoji, marketName)
	text += fmt.Sprintf("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n\n", b.getCategoryName(category))
	
	text += fmt.Sprintf("üí∞ *–¶–µ–Ω–∞:* %.2f ‚ÇΩ\n", currentPrice)
	text += fmt.Sprintf("üìà *–†–æ—Å—Ç:* %.1f%% –∑–∞ –ø–µ—Ä–∏–æ–¥\n", growthRate)
	text += fmt.Sprintf("üìä *–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:* %.1f%%\n", volatility)
	text += fmt.Sprintf("‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* %d/10\n", trendScore)
	text += fmt.Sprintf("%s *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* %s\n\n", emoji, recommendation)

	// –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
	text += "üîç *–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å:*\n"
	text += b.getDetailedAnalysis(trendScore, growthRate, currentPrice, category, volatility)
	
	text += "\nüìà *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:*\n"
	text += b.getInvestmentStrategy(trendScore, recommendation, currentPrice, category)
	
	text += fmt.Sprintf("\nüìä *–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:* %d —Ç–æ—á–µ–∫\n", dataPoints)

	// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "back_to_top"),
		),
	)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
	if imageURL != "" && imageURL != "https://steamcommunity-a.akamaihd.net/economy/image/placeholder" {
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(imageURL))
		photo.Caption = text
		photo.ParseMode = "Markdown"
		photo.ReplyMarkup = keyboard
		b.api.Send(photo)
	} else {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		b.api.Send(msg)
	}
}

func (b *Bot) getRecommendationEmoji(recommendation string) string {
	switch recommendation {
	case "BUY":
		return "üü¢"
	case "HOLD":
		return "üü°"
	case "SELL":
		return "üî¥"
	default:
		return "‚ö™"
	}
}

func (b *Bot) truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen-3] + "..."
}

func (b *Bot) getCategoryName(category string) string {
	switch category {
	case "knives":
		return "üî™ –¢–û–ü –ù–æ–∂–µ–π"
	case "weapons":
		return "üî´ –¢–û–ü –û—Ä—É–∂–∏—è"
	case "containers":
		return "üì¶ –¢–û–ü –ö–µ–π—Å–æ–≤"
	case "keys":
		return "üóùÔ∏è –¢–û–ü –ö–ª—é—á–µ–π"
	case "packages":
		return "üì§ –¢–û–ü –ü–∞–∫–µ—Ç–æ–≤"
	case "gloves":
		return "üß§ –¢–û–ü –ü–µ—Ä—á–∞—Ç–æ–∫"
	case "stickers":
		return "üè∑Ô∏è –¢–û–ü –°—Ç–∏–∫–µ—Ä–æ–≤"
	case "charms":
		return "üéØ –¢–û–ü –ë—Ä–µ–ª–∫–æ–≤"
	default:
		return "‚≠ê –¢–û–ü –í—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
	}
}

func (b *Bot) getCategoryEmoji(category string) string {
	switch category {
	case "knives":
		return "üî™"
	case "weapons":
		return "üî´"
	case "containers":
		return "üì¶"
	case "keys":
		return "üóùÔ∏è"
	case "packages":
		return "üì§"
	case "gloves":
		return "üß§"
	case "stickers":
		return "üè∑Ô∏è"
	case "charms":
		return "üéØ"
	default:
		return "‚ö°"
	}
}

func (b *Bot) getInvestmentAdvice(trend analyzer.ItemTrend) string {
	if trend.TrendScore >= 8 && trend.GrowthRate > 10 {
		return "–°–∏–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ - –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞!"
	} else if trend.TrendScore >= 7 && trend.CurrentPrice < 10 {
		return "–î–µ—à–µ–≤—ã–π –∞–∫—Ç–∏–≤ —Å —Ö–æ—Ä–æ—à–∏–º–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞–º–∏"
	} else if trend.TrendScore >= 7 && trend.CurrentPrice > 100 {
		return "–°—Ç–∞–±–∏–ª—å–Ω–∞—è –¥–æ—Ä–æ–≥–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è"
	} else if trend.TrendScore >= 6 {
		return "–£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
	} else {
		return "–†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è, —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
	}
}

func (b *Bot) getDetailedAnalysis(trendScore int, growthRate, currentPrice float64, category string, volatility float64) string {
	analysis := ""
	
	// –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
	if trendScore >= 8 {
		analysis += "‚úÖ –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∏–ª—å–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–æ—Å—Ç–∞\n"
	} else if trendScore >= 6 {
		analysis += "‚ö° –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –ø—Ä–µ–¥–º–µ—Ç –∏–º–µ–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª\n"
	}
	
	// –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–æ—Å—Ç—É
	if growthRate > 15 {
		analysis += "üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã\n"
	} else if growthRate > 5 {
		analysis += "üìà –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥\n"
	}
	
	// –ê–Ω–∞–ª–∏–∑ –ø–æ —Ü–µ–Ω–µ
	if currentPrice < 10 {
		analysis += "üíé –ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫\n"
	} else if currentPrice > 100 {
		analysis += "üí∞ Premium —Å–µ–≥–º–µ–Ω—Ç - –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤\n"
	}
	
	// –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	switch category {
	case "knives":
		analysis += "üî™ –ù–æ–∂–∏ - —Å–∞–º–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n"
	case "weapons":
		analysis += "üî´ –û—Ä—É–∂–∏–µ - –≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ —Å–ø—Ä–æ—Å\n"
	case "containers":
		analysis += "üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã - —Ä–∞—Å—Ç—É—Ç –≤ —Ü–µ–Ω–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º\n"
	case "gloves":
		analysis += "üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ - —Ä–µ–¥–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º\n"
	}
	
	// –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
	if volatility < 10 {
		analysis += "üõ°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞ - –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—å\n"
	} else if volatility > 30 {
		analysis += "‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω—ã –±—ã—Å—Ç—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
	}
	
	return analysis
}

func (b *Bot) getInvestmentStrategy(trendScore int, recommendation string, currentPrice float64, category string) string {
	strategy := ""
	
	switch recommendation {
	case "BUY":
		strategy += "üü¢ *–ü–æ–∫—É–ø–∞—Ç—å —Å–µ–π—á–∞—Å* - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞\n"
		if currentPrice < 50 {
			strategy += "üí° –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏\n"
		}
		strategy += "‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫ —Ö–æ–ª–¥–∞: 3-6 –º–µ—Å—è—Ü–µ–≤\n"
		
	case "HOLD":
		strategy += "üü° *–î–µ—Ä–∂–∞—Ç—å* - –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ\n"
		strategy += "üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –¥–∏–Ω–∞–º–∏–∫–æ–π, –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏\n"
		
	case "SELL":
		strategy += "üî¥ *–ü—Ä–æ–¥–∞–≤–∞—Ç—å* - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Å–Ω–∏–∂–µ–Ω–∏—è\n"
		strategy += "üí∏ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏—é –ø—Ä–∏–±—ã–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å\n"
	}
	
	// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	switch category {
	case "knives":
		strategy += "üî™ –ù–æ–∂–∏ –ª—É—á—à–µ –ø–æ–∫—É–ø–∞—Ç—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (MW, FN)\n"
	case "containers":
		strategy += "üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∏–≥—Ä–∞, –¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –≥–æ–¥\n"
	case "weapons":
		strategy += "üî´ –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ (AK, M4, AWP) –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ\n"
	}
	
	return strategy
}

// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞
func (b *Bot) sendBudgetCalculator(chatID int64) {
	text := `üí∞ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞*

–†–∞—Å—Å—á–∏—Ç–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é **210%**!

üéØ *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:*
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ø –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ª—É—á—à–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à –±—é–¥–∂–µ—Ç –º–µ–∂–¥—É –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–∫–∏–Ω–∞–º–∏
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∏—Å–∫–∏ –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é –ø—Ä–∏–±—ã–ª—å —á–µ—Ä–µ–∑ 6-12 –º–µ—Å—è—Ü–µ–≤

üí° *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö:*
–ù–∞–ø—Ä–∏–º–µ—Ä: 10000`

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –±—é–¥–∂–µ—Ç–æ–≤
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("5 000‚ÇΩ", "budget_5000"),
			tgbotapi.NewInlineKeyboardButtonData("10 000‚ÇΩ", "budget_10000"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("25 000‚ÇΩ", "budget_25000"),
			tgbotapi.NewInlineKeyboardButtonData("50 000‚ÇΩ", "budget_50000"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("100 000‚ÇΩ", "budget_100000"),
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π", "budget_custom"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏
type BudgetRecommendation struct {
	ItemName        string
	Category        string
	Price           float64
	Quantity        int
	TotalCost       float64
	ExpectedROI     float64
	ExpectedProfit  float64
	TrendScore      int
	Recommendation  string
}

// –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
func (b *Bot) calculateOptimalPortfolio(budget float64) ([]BudgetRecommendation, float64, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø—Ä–µ–¥–º–µ—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º ROI 210%
	items, err := b.analyzer.GetBestInvestmentItems(50, 2.1) // –º–∏–Ω–∏–º—É–º 210% ROI
	if err != nil {
		return nil, 0, err
	}

	var recommendations []BudgetRecommendation
	remainingBudget := budget
	totalExpectedProfit := 0.0

	// –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
	categoryAllocations := map[string]float64{
		"knives":     0.4,  // 40% –Ω–∞ –Ω–æ–∂–∏ (—Å—Ç–∞–±–∏–ª—å–Ω–æ)
		"weapons":    0.3,  // 30% –Ω–∞ –æ—Ä—É–∂–∏–µ (–ª–∏–∫–≤–∏–¥–Ω–æ)
		"containers": 0.15, // 15% –Ω–∞ –∫–µ–π—Å—ã (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ)
		"gloves":     0.1,  // 10% –Ω–∞ –ø–µ—Ä—á–∞—Ç–∫–∏ (–ø—Ä–µ–º–∏—É–º)
		"stickers":   0.05, // 5% –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)
	}

	for category, allocation := range categoryAllocations {
		categoryBudget := budget * allocation
		categoryItems := filterItemsByCategory(items, category)
		
		for _, item := range categoryItems {
			if remainingBudget < item.Price || categoryBudget < item.Price {
				continue
			}

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
			maxQuantity := int(categoryBudget / item.Price)
			if maxQuantity > 3 {
				maxQuantity = 3 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —à—Ç—É–∫–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
			}
			if maxQuantity == 0 {
				continue
			}

			totalCost := item.Price * float64(maxQuantity)
			expectedProfit := totalCost * (item.ExpectedROI - 1.0)

			recommendation := BudgetRecommendation{
				ItemName:       item.MarketName,
				Category:       item.Category,
				Price:          item.Price,
				Quantity:       maxQuantity,
				TotalCost:      totalCost,
				ExpectedROI:    item.ExpectedROI,
				ExpectedProfit: expectedProfit,
				TrendScore:     item.TrendScore,
				Recommendation: item.Recommendation,
			}

			recommendations = append(recommendations, recommendation)
			remainingBudget -= totalCost
			categoryBudget -= totalCost
			totalExpectedProfit += expectedProfit

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
			if len(recommendations) >= 8 {
				break
			}
		}
	}

	return recommendations, totalExpectedProfit, nil
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–∞
func (b *Bot) sendBudgetResults(chatID int64, budget float64) {
	recommendations, totalExpectedProfit, err := b.calculateOptimalPortfolio(budget)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		b.api.Send(msg)
		return
	}

	if len(recommendations) == 0 {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ —Å —Ç—Ä–µ–±—É–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é 210%+")
		b.api.Send(msg)
		return
	}

	text := fmt.Sprintf("üí∞ *–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è %s‚ÇΩ*\n\n", formatPrice(budget))

	totalInvested := 0.0
	for _, rec := range recommendations {
		totalInvested += rec.TotalCost
	}

	expectedROI := ((totalInvested + totalExpectedProfit) / totalInvested) * 100
	
	text += fmt.Sprintf("üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n")
	text += fmt.Sprintf("üíµ –ö –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é: %s‚ÇΩ\n", formatPrice(totalInvested))
	text += fmt.Sprintf("üí∞ –û—Å—Ç–∞—Ç–æ–∫: %s‚ÇΩ\n", formatPrice(budget-totalInvested))
	text += fmt.Sprintf("üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: %s‚ÇΩ\n", formatPrice(totalExpectedProfit))
	text += fmt.Sprintf("üéØ –û–±—â–∏–π ROI: %.0f%%\n\n", expectedROI)

	text += "üõí *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–∫—É–ø–∫–∏:*\n\n"

	for i, rec := range recommendations {
		emoji := b.getCategoryEmoji(rec.Category)
		text += fmt.Sprintf("%d. %s *%s*\n", i+1, emoji, rec.ItemName)
		text += fmt.Sprintf("   üí∏ %s‚ÇΩ √ó %d —à—Ç = %s‚ÇΩ\n", 
			formatPrice(rec.Price), rec.Quantity, formatPrice(rec.TotalCost))
		text += fmt.Sprintf("   üìà ROI: %.0f%% (+%s‚ÇΩ)\n", 
			rec.ExpectedROI*100, formatPrice(rec.ExpectedProfit))
		text += fmt.Sprintf("   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: %.1f/10\n\n", rec.TrendScore)
	}

	text += "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
	text += "‚Ä¢ –≠—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑, —Ä–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è\n"
	text += "‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –ø–æ—Ç–µ—Ä—è—Ç—å\n"
	text += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫ —Ö–æ–ª–¥–∞: 6-12 –º–µ—Å—è—Ü–µ–≤\n"
	text += "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏–≥—Ä—ã –∏ —Ä—ã–Ω–∫–∞"

	// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if len(text) > 4000 {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
		firstPart := text[:4000]
		lastNewline := strings.LastIndex(firstPart, "\n")
		if lastNewline > 0 {
			firstPart = firstPart[:lastNewline]
		}
		
		msg := tgbotapi.NewMessage(chatID, firstPart)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
		secondPart := text[len(firstPart):]
		msg = tgbotapi.NewMessage(chatID, secondPart)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", "budget_new"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç—ã", "back_to_top"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "üí° –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å –¥—Ä—É–≥–∏–º –±—é–¥–∂–µ—Ç–æ–º?")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func filterItemsByCategory(items []analyzer.ItemTrend, category string) []analyzer.ItemTrend {
	var filtered []analyzer.ItemTrend
	for _, item := range items {
		if item.Category == category {
			filtered = append(filtered, item)
		}
	}
	return filtered
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
func formatPrice(price float64) string {
	if price >= 1000000 {
		return fmt.Sprintf("%.1fM", price/1000000)
	} else if price >= 1000 {
		return fmt.Sprintf("%.0fK", price/1000)
	}
	return fmt.Sprintf("%.0f", price)
}